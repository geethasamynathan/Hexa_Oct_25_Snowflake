CREATE OR REPLACE TRANSIENT DATABASE TASK_DB;

// Prepare table
CREATE OR REPLACE TABLE CUSTOMERS (
    CUSTOMER_ID INT AUTOINCREMENT START = 1 INCREMENT =1,
    FIRST_NAME VARCHAR(40) DEFAULT 'JENNIFER' ,
    CREATE_DATE DATE);


CREATE OR REPLACE TASK CUSTOMER_INSERT
    WAREHOUSE = COMPUTE_WH
    SCHEDULE = '1 MINUTE'
    AS 
    INSERT INTO CUSTOMERS(CREATE_DATE) VALUES(CURRENT_TIMESTAMP);

    show tasks;


    alter task customer_insert resume;
    select * from customers;


    CREATE OR REPLACE TASK CUSTOMER_INSERT
    WAREHOUSE = COMPUTE_WH
    SCHEDULE = 'USING CRON 0 7,10 * * 5L UTC'
    AS 
    INSERT INTO CUSTOMERS(CREATE_DATE) VALUES(CURRENT_TIMESTAMP);



    --chained tasks
// Prepare a second table
CREATE OR REPLACE TABLE CUSTOMERS2 (
    CUSTOMER_ID INT,
    FIRST_NAME VARCHAR(40),
    CREATE_DATE DATE);

    ALTER TASK CUSTOMER_INSERT SUSPEND;
    
    // Create a child task
CREATE OR REPLACE TASK CUSTOMER_INSERT2
    WAREHOUSE = COMPUTE_WH
    AFTER CUSTOMER_INSERT
    AS 
    INSERT INTO CUSTOMERS2 SELECT * FROM CUSTOMERS;


// Prepare a third table
CREATE OR REPLACE TABLE CUSTOMERS3 (
    CUSTOMER_ID INT,
    FIRST_NAME VARCHAR(40),
    CREATE_DATE DATE,
    INSERT_DATE DATE DEFAULT DATE(CURRENT_TIMESTAMP));
    
// Create a child task
CREATE OR REPLACE TASK CUSTOMER_INSERT3
    WAREHOUSE = COMPUTE_WH
    AFTER CUSTOMER_INSERT2
    AS 
    INSERT INTO CUSTOMERS3 (CUSTOMER_ID,FIRST_NAME,CREATE_DATE) SELECT * FROM CUSTOMERS2;


    SHOW TASKS;


ALTER TASK CUSTOMER_INSERT
SET SCHEDULE='1 MINUTE'

ALTER TASK CUSTOMER_INSERT3 SUSPEND;
ALTER TASK CUSTOMER_INSERT2 SUSPEND;


ALTER TASK CUSTOMER_INSERT SUSPEND;

// Recursively resumes a specified task and all its dependent tasks
SELECT SYSTEM$TASK_DEPENDENTS_ENABLE( '<task_name>' )

SELECT * FROM CUSTOMERS;

SELECT * FROM CUSTOMERS2;
SELECT * FROM CUSTOMERS3;

CREATE OR REPLACE PROCEDURE CUSTOMERS_INSERT_PROCEDURE (CREATE_DATE VARCHAR)
RETURNS STRING NOT NULL
LANGUAGE JAVASCRIPT
AS
$$
var sql_command = 'INSERT INTO CUSTOMERS(CREATE_DATE) VALUES(:1);';
snowflake.execute({
    sqlText: sql_command,
    binds: [CREATE_DATE]
});
return "successfully inserted!...";
$$;

call customers_insert_procedure('2025-10-10');


CREATE OR REPLACE TASK CUSTOMERS_INSERT_PROCEDURE
WAREHOUSE = COMPUTE_WH
SCHEDULE = '1 MINUTE'
AS
CALL CUSTOMERS_INSERT_PROCEDURE(CURRENT_TIMESTAMP);


SHOW TASKS;

ALTER TASK CUSTOMERS_INSERT_PROCEDURE RESUME;

SELECT * FROM CUSTOMERS;


